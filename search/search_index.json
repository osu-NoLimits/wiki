{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the comprehensive developement guide for osuNoLimits. This guide will help you developing or setting up these applications:</p> <p>Shiina-Web </p> <p>bancho.py-ex </p> <p>Community Support</p> <p>Need help? Join our community on Discord for support and updates. </p>"},{"location":"formatting/","title":"Formatting","text":""},{"location":"formatting/#highlighting","title":"Highlighting","text":"<p>ex:submit</p> <p>This text will appear in a lighter tone.</p> <p>Text can be deleted and replacement text added. This can also be combined into onea single operation. Highlighting is also possible and comments can be added inline.</p> <p>Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.</p>"},{"location":"formatting/#keys","title":"Keys","text":"<p>Ctrl+Alt+Del</p>"},{"location":"formatting/#no-title-alerts","title":"No Title Alerts","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"formatting/#buttons","title":"Buttons","text":"<p>Send </p>"},{"location":"formatting/#tabs","title":"Tabs","text":"CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"frontend/","title":"Frontend Development Guide","text":"<p>Welcome to the comprehensive guide for building frontends that integrate with bancho.py-ex. This guide covers the PubSub system that enables real-time communication between your frontend and the server.</p> <p>What are PubSubs?</p> <p>PubSubs (Publish-Subscribe) are real-time communication channels that allow external applications to interact with the bancho.py-ex server. Each channel either sends data from the server or receives commands from your application.</p> <p>Getting Started</p> <ul> <li> Sends - Server pushes data to your application</li> <li> Receives - Your application sends commands to server</li> <li> All data is transmitted in JSON format</li> </ul>"},{"location":"frontend/#implementation-example","title":"Implementation example","text":"Shiina bancho.py-ex <pre><code>public void onEnable(String, pluginName, Logger logger) {\n    PubSubModels.RankOutput rankOutput = new PubSubModels().new RankOutput();\n    rankOutput.setBeatmap_id(\"1\");\n    rankOutput.setStatus(2); // ranked\n    rankOutput.setFrozen(true);\n\n    long subscribers = App.jedisPool.publish(\"rank\", new Gson().toJson(rankOutput));\n}\n</code></pre> <pre><code>@router.post(\"/web/osu-submit-modular.php\")\nasync def osuSubmitModular(...) -&gt; Response:\n    score = Score.from_submission(score_data[2:])\n    pubsub = app.state.services.redis.pubsub()\n    await pubsub.execute_command(\"PUBLISH\", \"ex:submit\", score.toJSON())\n</code></pre>"},{"location":"frontend/#score-map-management","title":"Score / Map management","text":""},{"location":"frontend/#score-submissions","title":"Score Submissions","text":"<p> <code>ex:submit</code></p> <p>Direction:  Server sends to your application Purpose: Real-time score submissions and statistics</p>  JSON Data Field Reference <pre><code>{\n  \"id\": 219154,\n  \"mode\": 0,\n  \"mods\": 88,\n  \"pp\": 221283.124,\n  \"sr\": 90.73485416518942,\n  \"score\": 88845,\n  \"max_combo\": 3,\n  \"acc\": 2.158273381294964,\n  \"n300\": 3,\n  \"n100\": 0,\n  \"n50\": 0,\n  \"nmiss\": 136,\n  \"ngeki\": 1,\n  \"nkatu\": 0,\n  \"grade\": 1,\n  \"passed\": false,\n  \"perfect\": false,\n  \"status\": 0,\n  \"client_time\": \"2025-02-02T11:10:58\",\n  \"server_time\": \"2025-02-02T11:10:57.000379\",\n  \"time_elapsed\": 54540,\n  \"client_flags\": 0,\n  \"client_checksum\": \"EXAMPLE\",\n  \"rank\": null,\n  \"beatmap_id\": 372245,\n  \"player_id\": 1316\n}\n</code></pre> Field Type Description <code>id</code> <code>int</code> Unique score ID <code>mode</code> <code>int</code> Game mode (0=std, 1=taiko, 2=catch, 3=mania) <code>mods</code> <code>int</code> Mod combination bitwise <code>pp</code> <code>float</code> Performance points <code>sr</code> <code>float</code> Star rating <code>score</code> <code>int</code> Total score <code>max_combo</code> <code>int</code> Maximum combo achieved <code>acc</code> <code>float</code> Accuracy percentage <code>passed</code> <code>bool</code> Whether the map was passed <code>beatmap_id</code> <code>int</code> Beatmap identifier <code>player_id</code> <code>int</code> Player identifier"},{"location":"frontend/#beatmap-status-changes","title":"Beatmap Status Changes","text":"<p> <code>ex:map_status_change</code></p> <p>Direction:  Server sends to your application Purpose: Beatmap ranking status updates</p>  JSON Data Field Reference <pre><code>{\n  \"map_ids\": [4840847, 4888854, 4892923, 4894589, 4918951],\n  \"ranktype\": \"set\",\n  \"type\": \"love\"\n}\n</code></pre> Field Type Description <code>map_ids</code> <code>int[]</code> Array of beatmap IDs affected <code>ranktype</code> <code>string</code> Ranking operation type (<code>set</code>, <code>update</code>) <code>type</code> <code>string</code> New status (<code>love</code>, <code>ranked</code>, <code>approved</code>, <code>pending</code>)"},{"location":"frontend/#beatmap-ranking","title":"Beatmap Ranking","text":"<p>:material-receive: <code>rank</code></p> <p>Direction:  Your application sends to server Purpose: Manually rank/unrank beatmaps</p>  JSON Data Field Reference <pre><code>{\n  \"beatmap_id\": 4870830,\n  \"status\": 2,\n  \"frozen\": true\n}\n</code></pre> Field Type Description <code>beatmap_id</code> <code>int</code> Target beatmap ID <code>status</code> <code>int</code> Ranking status (0=pending, 1=ranked, 2=approved, 3=qualified, 4=loved) <code>frozen</code> <code>bool</code> Whether to freeze the beatmap from further changes"},{"location":"frontend/#user-management","title":"User Management","text":""},{"location":"frontend/#user-restriction","title":"User Restriction","text":"<p>:material-receive: <code>restrict</code></p> <p>Direction:  Your application sends to server Purpose: Restrict user accounts</p>  JSON Data Field Reference <pre><code>{\n  \"id\": 3,\n  \"userId\": 3,\n  \"reason\": \"the owner cheats\"\n}\n</code></pre> Field Type Description <code>id</code> <code>int</code> Target user ID to restrict <code>userId</code> <code>int</code> Admin user ID performing the action <code>reason</code> <code>string</code> Reason for restriction"},{"location":"frontend/#user-unrestriction","title":"User Unrestriction","text":"<p>:material-receive: <code>unrestrict</code></p> <p>Direction:  Your application sends to server Purpose: Unrestrict user accounts</p>  JSON Data Field Reference <pre><code>{\n  \"id\": 3,\n  \"userId\": 3,\n  \"reason\": \"isn't a bad guy\"\n}\n</code></pre> Field Type Description <code>id</code> <code>int</code> Target user ID to unrestrict <code>userId</code> <code>int</code> Admin user ID performing the action <code>reason</code> <code>string</code> Reason for unrestriction"},{"location":"frontend/#user-data-wipe","title":"User Data Wipe","text":"<p>:material-receive: <code>wipe</code></p> <p>Direction:  Your application sends to server Purpose: Wipe user statistics for specific game mode</p>  JSON Data Field Reference <pre><code>{\n  \"id\": 3,\n  \"mode\": 0\n}\n</code></pre> Field Type Description <code>id</code> <code>int</code> Target user ID <code>mode</code> <code>int</code> Game mode to wipe (0=std, 1=taiko, 2=catch, 3=mania)"},{"location":"frontend/#communication","title":"Communication","text":""},{"location":"frontend/#global-announcements","title":"Global Announcements","text":"<p>:material-receive: <code>alert_all</code></p> <p>Direction:  Your application sends to server Purpose: Send announcements to all online users</p>  JSON Data Field Reference <pre><code>{\n  \"message\": \"Server maintenance in 10 minutes!\"\n}\n</code></pre> Field Type Description <code>message</code> <code>string</code> Announcement message to broadcast"},{"location":"frontend/#premium-features","title":"Premium Features","text":""},{"location":"frontend/#supporter-status","title":"Supporter Status","text":"<p>:material-receive: <code>givedonator</code></p> <p>Direction:  Your application sends to server Purpose: Grant supporter/donator status</p>  JSON Data Field Reference <pre><code>{\n  \"id\": 3,\n  \"duration\": \"1w\"\n}\n</code></pre> Field Type Description <code>id</code> <code>int</code> Target user ID <code>duration</code> <code>string</code> Duration (s=seconds, m=minutes, h=hours, d=days, w=weeks)"},{"location":"frontend/#privileges-management","title":"Privileges Management","text":"<p>Available Privileges</p> <p><code>normal</code> \u2022 <code>verified</code> \u2022 <code>whitelisted</code> \u2022 <code>supporter</code> \u2022 <code>premium</code> \u2022 <code>alumni</code> \u2022 <code>tournament</code> \u2022 <code>nominator</code> \u2022 <code>mod</code> \u2022 <code>admin</code> \u2022 <code>developer</code></p>"},{"location":"frontend/#add-privileges","title":"Add Privileges","text":"<p>:material-receive: <code>addpriv</code></p> <p>Direction:  Your application sends to server Purpose: Grant user privileges</p>  JSON Data Field Reference <pre><code>{\n  \"id\": 3,\n  \"privs\": [\"admin\", \"developer\"]\n}\n</code></pre> Field Type Description <code>id</code> <code>int</code> Target user ID <code>privs</code> <code>string[]</code> Array of privileges to add"},{"location":"frontend/#remove-privileges","title":"Remove Privileges","text":"<p>:material-receive: <code>removepriv</code></p> <p>Direction:  Your application sends to server Purpose: Remove user privileges</p>  JSON Data Field Reference <pre><code>{\n  \"id\": 3,\n  \"privs\": [\"admin\", \"developer\"]\n}\n</code></pre> Field Type Description <code>id</code> <code>int</code> Target user ID <code>privs</code> <code>string[]</code> Array of privileges to remove"},{"location":"installation/","title":"Installation Guide","text":"<p>Welcome to the comprehensive installation guide for osuNoLimits. This guide will walk you through setting up Shiina-Web and bancho.py-ex from scratch.</p> <p>Prerequisites</p> <p>Before starting, ensure you have:</p> <ul> <li> A Linux server (Ubuntu 24.04+ recommended)</li> <li> A domain name with DNS access</li> <li> Basic command-line knowledge</li> <li> Approximately 30-60 minutes</li> </ul>"},{"location":"installation/#domain-configuration","title":"Domain Configuration","text":"<p>Configure the following subdomains to point to your server. We strongly recommend using Cloudflare for DNS management and DDoS protection.</p> <p>Required Subdomains</p> <p>Create these DNS records pointing to your server's IP:</p> A RecordsCloudflare SetupExample Subdomain Purpose Example <code>@</code> Main domain <code>osunolimits.dev</code> <code>osu</code> Game client connection <code>osu.osunolimits.dev</code> <code>c</code> Game server <code>c.osunolimits.dev</code> <code>c4</code> Game server <code>c4.osunolimits.dev</code> <code>a</code> API endpoint <code>a.osunolimits.dev</code> <code>assets</code> Static assets <code>assets.osunolimits.dev</code> <code>api</code> Bancho API <code>api.osunolimits.dev</code> <ol> <li>Add your domain to Cloudflare</li> <li>Update nameservers at your registrar</li> <li>Create the A records listed above</li> <li>Enable proxy (orange cloud) for web traffic protection</li> </ol> <p></p> <p>SSL Configuration</p> <p>You can choose between flexible or strict SSL encryption. For production environments, we recommend Full (Strict) SSL mode with valid certificates.</p> <p>\ud83d\udcd6 Detailed SSL setup guide</p> <p>Version Control Recommendation</p> <p>Create a GitHub fork of the repositories before proceeding. This allows you to:</p> <ul> <li> Easily pull updates</li> <li> Make custom modifications  </li> <li> Maintain your configuration</li> </ul>"},{"location":"installation/#installing-banchopy-ex","title":"Installing bancho.py-ex","text":""},{"location":"installation/#docker-installation","title":"Docker Installation","text":"<p>Docker is required to run bancho.py-ex. Choose your operating system below:</p>  Ubuntu Debian Fedora <p>Cleanup First</p> <p>Remove any conflicting Docker packages:</p> <pre><code>for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do \n    sudo apt-get remove $pkg\ndone\n</code></pre> <p>Step 1: Add Docker's official GPG key and repository <pre><code>sudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n</code></pre></p> <p>Step 2: Add Docker repository to APT sources <pre><code>echo \\\n\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n$(. /etc/os-release &amp;&amp; echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable\" | \\\nsudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre></p> <p>Step 3: Install Docker <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre></p> <p>Cleanup First</p> <p>Remove any conflicting Docker packages:</p> <pre><code>for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do \n    sudo apt-get remove $pkg\ndone\n</code></pre> <p>Step 1: Add Docker's official GPG key and repository <pre><code>sudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n</code></pre></p> <p>Step 2: Add Docker repository to APT sources <pre><code>echo \\\n\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\\n$(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\nsudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre></p> <p>Step 3: Install Docker <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre></p> <p>Cleanup First</p> <p>Remove any conflicting Docker packages:</p> <pre><code>sudo dnf remove docker \\\n              docker-client \\\n              docker-client-latest \\\n              docker-common \\\n              docker-latest \\\n              docker-latest-logrotate \\\n              docker-logrotate \\\n              docker-selinux \\\n              docker-engine-selinux \\\n              docker-engine\n</code></pre> <p>Step 2: Add Docker repository <pre><code>sudo dnf -y install dnf-plugins-core\nsudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo\n</code></pre></p> <p>Step 3: Install Docker <pre><code>sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre></p> <p>Step 4: Enable Docker service <pre><code>sudo systemctl enable --now docker\n</code></pre></p>"},{"location":"installation/#nginx-installation","title":"Nginx Installation","text":"<p>Nginx serves as our web server and reverse proxy. Follow the instructions for your operating system:</p>  Ubuntu &amp; Debian Fedora <p>Remove Apache2 (Ubuntu only)</p> <p>If Apache2 is installed, remove it first to avoid conflicts:</p> <pre><code>sudo systemctl stop apache2\nsudo apt remove apache2 apache2-utils apache2-bin apache2.2-common\nsudo apt autoremove\n</code></pre> <p>Step 1: Update package list and install Nginx <pre><code>sudo apt update\nsudo apt install nginx\n</code></pre></p> <p>Step 2: Verify installation <pre><code>sudo systemctl status nginx\n</code></pre></p> <p>Expected Output</p> <p>You should see <code>Active: active (running)</code> in green text.</p> <p>Step 1: Update packages and install Nginx <pre><code>sudo dnf update\nsudo dnf install nginx\n</code></pre></p> <p>Step 2: Start and enable Nginx <pre><code>sudo systemctl start nginx\nsudo systemctl enable nginx\n</code></pre></p> <p>Step 3: Configure firewall <pre><code>sudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n</code></pre></p> <p>Step 4: Verify installation <pre><code>sudo systemctl status nginx\n</code></pre></p>"},{"location":"installation/#git-installation","title":"Git Installation","text":"<p>Git is required for cloning the repository and managing updates.</p>  Ubuntu &amp; Debian Fedora <p>Step 1: Update package list and install Git <pre><code>sudo apt update\nsudo apt install git\n</code></pre></p> <p>Step 2: Verify installation <pre><code>git --version\n</code></pre></p> <p>Expected Output</p> <p>You should see something like <code>git version 2.34.1</code></p> <p>Step 3: Configure Git (replace with your information) <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre></p> <p>Step 1: Update packages and install Git <pre><code>sudo dnf update\nsudo dnf install git\n</code></pre></p> <p>Step 2: Verify installation <pre><code>git --version\n</code></pre></p> <p>Expected Output</p> <p>You should see something like <code>git version 2.34.1</code></p> <p>Step 3: Configure Git (replace with your information) <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre></p>"},{"location":"installation/#repository-setup","title":"Repository Setup","text":"<p>Clone the bancho.py-ex repository to your server:</p> <p>Use Your Fork</p> <p>If you created a fork, replace the URL with your fork's URL for easier updates.</p> <pre><code>git clone https://github.com/osu-NoLimits/bancho.py-ex.git /home/bancho-py-ex\ncd /home/bancho-py-ex\n</code></pre>"},{"location":"installation/#environment-setup","title":"Environment Setup","text":"<p>First, create your configuration files from the provided examples:</p> <pre><code>cp .env.example .env\ncp logging.yaml.example logging.yaml\n</code></pre>"},{"location":"installation/#edit-configuration","title":"Edit Configuration","text":"<p>Open the environment file for editing:</p> <pre><code>nano .env\n</code></pre> <p>Required Configuration</p> <p>You must configure these essential settings before proceeding:</p>  Authentication SSL Settings (Optional) Customization (Optional) Webhooks (Optional) Setting Description Required <code>OSU_API_KEY</code> Get your osu! API key here \u2705 <code>DB_PASS</code> Strong database password \u2705 <code>DOMAIN</code> Your domain (e.g., <code>osunolimits.dev</code>) \u2705 <p>Only required for Full/Strict SSL mode</p> <pre><code>SSL_CERT_PATH=/path/to/your/fullchain.crt\nSSL_KEY_PATH=/path/to/your/private.key\n</code></pre> Setting Description Example <code>SERVER_NAME</code> Your server's display name <code>osuNoLimits</code> <code>DISCORD_URL</code> Your Discord invite link <code>https://discord.gg/yourinvite</code> <code>MENU_ICON_URL</code> In-game menu icon URL to your icon <code>MENU_ONCLICK_URL</code> Click destination Your website URL <code>SEASONAL_BGS</code> Background images Comma-separated URLs <p>Configure Discord webhooks for notifications:</p> <pre><code>FIRST_PLACES_WEBHOOK=https://discord.com/api/webhooks/...\nENABLE_FIRST_PLACES_WEBHOOK=True\nDISCORD_AUDIT_LOG_WEBHOOK=https://discord.com/api/webhooks/...\n</code></pre>"},{"location":"installation/#nginx-configuration","title":"Nginx Configuration","text":"<p>Install the pre-configured nginx setup:</p> <pre><code>./scripts/install-nginx-config.sh\n</code></pre> <p>Configuration Complete</p> <p>Your nginx configuration has been automatically set up with the correct proxy settings for all bancho.py-ex endpoints.</p>"},{"location":"installation/#build-and-start","title":"Build and Start","text":"<p>With everything configured, build and start the project:</p> <pre><code># Build the Docker containers\nmake build\n\n# Start all services\nmake run\n</code></pre> <p>Development vs Production</p> <ul> <li>For development: Use <code>make run</code> for easier debugging</li> <li>For production: Consider using <code>make run-bg</code> or <code>screen -S bancho make run</code> to run in background</li> </ul>"},{"location":"installation/#autoban-configuration","title":"Autoban Configuration","text":"<p>Configure performance point limits to prevent cheating:</p> <pre><code>nano caps.json\n</code></pre> <p>PP Caps Configuration</p> <pre><code>{\n    \"enabled\": true,\n    \"caps\": {\n        \"0\": 800,    // osu! standard\n        \"1\": 1000,   // osu! taiko  \n        \"2\": 900,    // osu! catch\n        \"3\": 850     // osu! mania\n    }\n}\n</code></pre> <p>Important Notes</p> <ul> <li>Set <code>\"enabled\": true</code> to activate automatic banning</li> <li>Adjust PP values based on your server's skill level</li> <li>Monitor logs for any false positives</li> </ul>"},{"location":"plugins/","title":"Extending shiina","text":""},{"location":"theming/","title":"Theme shiina","text":""}]}
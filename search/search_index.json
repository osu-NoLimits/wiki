{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation Guide","text":"<p>Welcome to the comprehensive installation guide for osuNoLimits. This guide will walk you through setting up Shiina-Web and bancho.py-ex from scratch.</p> <p>Community Support</p> <p>Need help? Join our community on Discord for support and updates.</p> <p></p> <p>Prerequisites</p> <p>Before starting, ensure you have:</p> <ul> <li> A Linux server (Ubuntu 24.04+ recommended)</li> <li> A domain name with DNS access</li> <li> Basic command-line knowledge</li> <li> Approximately 30-60 minutes</li> </ul>"},{"location":"#domain-configuration","title":"Domain Configuration","text":"<p>Configure the following subdomains to point to your server. We strongly recommend using Cloudflare for DNS management and DDoS protection.</p> <p>Required Subdomains</p> <p>Create these DNS records pointing to your server's IP:</p> A RecordsCloudflare SetupExample Subdomain Purpose Example <code>@</code> Main domain <code>osunolimits.dev</code> <code>osu</code> Game server <code>osu.osunolimits.dev</code> <code>c</code> Game server <code>c.osunolimits.dev</code> <code>c4</code> Game server <code>c.osunolimits.dev</code> <code>a</code> API endpoint <code>a.osunolimits.dev</code> <code>assets</code> Static assets <code>assets.osunolimits.dev</code> <code>api</code> Bancho API <code>assets.osunolimits.dev</code> <ol> <li>Add your domain to Cloudflare</li> <li>Update nameservers at your registrar</li> <li>Create the A records listed above</li> <li>Enable proxy (orange cloud) for web traffic protection</li> </ol> <p></p> <p>SSL Configuration</p> <p>You can choose between flexible or strict SSL encryption. For production environments, we recommend Full (Strict) SSL mode with valid certificates.</p> <p>\ud83d\udcd6 Detailed SSL setup guide</p> <p>Version Control Recommendation</p> <p>Create a GitHub fork of the repositories before proceeding. This allows you to:</p> <ul> <li> Easily pull updates</li> <li> Make custom modifications  </li> <li> Maintain your configuration</li> </ul>"},{"location":"#installing-banchopy-ex","title":"Installing bancho.py-ex","text":""},{"location":"#docker-installation","title":"Docker Installation","text":"<p>Docker is required to run bancho.py-ex. Choose your operating system below:</p>  Ubuntu Debian Fedora <p>Cleanup First</p> <p>Remove any conflicting Docker packages:</p> <pre><code>for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do \n    sudo apt-get remove $pkg\ndone\n</code></pre> <p>Step 1: Add Docker's official GPG key and repository <pre><code>sudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n</code></pre></p> <p>Step 2: Add Docker repository to APT sources <pre><code>echo \\\n\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n$(. /etc/os-release &amp;&amp; echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable\" | \\\nsudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre></p> <p>Step 3: Install Docker <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre></p> <p>Cleanup First</p> <p>Remove any conflicting Docker packages:</p> <pre><code>for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do \n    sudo apt-get remove $pkg\ndone\n</code></pre> <p>Step 1: Add Docker's official GPG key and repository <pre><code>sudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n</code></pre></p> <p>Step 2: Add Docker repository to APT sources <pre><code>echo \\\n\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\\n$(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\nsudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre></p> <p>Step 3: Install Docker <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre></p> <p>Step 1: Remove conflicting packages <pre><code>sudo dnf remove docker \\\n              docker-client \\\n              docker-client-latest \\\n              docker-common \\\n              docker-latest \\\n              docker-latest-logrotate \\\n              docker-logrotate \\\n              docker-selinux \\\n              docker-engine-selinux \\\n              docker-engine\n</code></pre></p> <p>Step 2: Add Docker repository <pre><code>sudo dnf -y install dnf-plugins-core\nsudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo\n</code></pre></p> <p>Step 3: Install Docker <pre><code>sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre></p> <p>Step 4: Enable Docker service <pre><code>sudo systemctl enable --now docker\n</code></pre></p>"},{"location":"#nginx-installation","title":"Nginx Installation","text":"<p>Nginx serves as our web server and reverse proxy. Follow the instructions for your operating system:</p>  Ubuntu &amp; Debian Fedora <p>Remove Apache2 (Ubuntu only)</p> <p>If Apache2 is installed, remove it first to avoid conflicts:</p> <pre><code>sudo systemctl stop apache2\nsudo apt remove apache2 apache2-utils apache2-bin apache2.2-common\nsudo apt autoremove\n</code></pre> <p>Step 1: Update package list and install Nginx <pre><code>sudo apt update\nsudo apt install nginx\n</code></pre></p> <p>Step 2: Verify installation <pre><code>sudo systemctl status nginx\n</code></pre></p> <p>Expected Output</p> <p>You should see <code>Active: active (running)</code> in green text.</p> <p>Step 1: Update packages and install Nginx <pre><code>sudo dnf update\nsudo dnf install nginx\n</code></pre></p> <p>Step 2: Start and enable Nginx <pre><code>sudo systemctl start nginx\nsudo systemctl enable nginx\n</code></pre></p> <p>Step 3: Configure firewall <pre><code>sudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n</code></pre></p> <p>Step 4: Verify installation <pre><code>sudo systemctl status nginx\n</code></pre></p>"},{"location":"#git-installation","title":"Git Installation","text":"<p>Git is required for cloning the repository and managing updates.</p>  Ubuntu &amp; Debian Fedora <p>Step 1: Install Git <pre><code>sudo apt update\nsudo apt install git\n</code></pre></p> <p>Step 2: Verify installation <pre><code>git --version\n</code></pre></p> <p>Step 3: Configure Git (replace with your information) <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre></p> <p>Step 1: Install Git <pre><code>sudo dnf update\nsudo dnf install git\n</code></pre></p> <p>Step 2: Verify installation <pre><code>git --version\n</code></pre></p> <p>Step 3: Configure Git (replace with your information) <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre></p>"},{"location":"#repository-setup","title":"Repository Setup","text":"<p>Clone the bancho.py-ex repository to your server:</p> <p>Use Your Fork</p> <p>If you created a fork, replace the URL with your fork's URL for easier updates.</p> <pre><code>git clone https://github.com/osu-NoLimits/bancho.py-ex.git /home/bancho-py-ex\ncd /home/bancho-py-ex\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":""},{"location":"#environment-setup","title":"Environment Setup","text":"<p>First, create your configuration files from the provided examples:</p> <pre><code>cp .env.example .env\ncp logging.yaml.example logging.yaml\n</code></pre>"},{"location":"#edit-configuration","title":"Edit Configuration","text":"<p>Open the environment file for editing:</p> <pre><code>nano .env\n</code></pre> <p>Required Configuration</p> <p>You must configure these essential settings before proceeding:</p>  Authentication SSL Settings (Optional) Customization (Optional) Webhooks (Optional) Setting Description Required <code>OSU_API_KEY</code> Get your osu! API key here \u2705 <code>DB_PASS</code> Strong database password \u2705 <code>DOMAIN</code> Your domain (e.g., <code>osunolimits.dev</code>) \u2705 <p>Only required for Full/Strict SSL mode</p> <pre><code>SSL_CERT_PATH=/path/to/your/fullchain.crt\nSSL_KEY_PATH=/path/to/your/private.key\n</code></pre> Setting Description Example <code>SERVER_NAME</code> Your server's display name <code>osuNoLimits</code> <code>DISCORD_URL</code> Your Discord invite link <code>https://discord.gg/yourinvite</code> <code>MENU_ICON_URL</code> In-game menu icon URL to your icon <code>MENU_ONCLICK_URL</code> Click destination Your website URL <code>SEASONAL_BGS</code> Background images Comma-separated URLs <p>Configure Discord webhooks for notifications:</p> <pre><code>FIRST_PLACES_WEBHOOK=https://discord.com/api/webhooks/...\nENABLE_FIRST_PLACES_WEBHOOK=True\nDISCORD_AUDIT_LOG_WEBHOOK=https://discord.com/api/webhooks/...\n</code></pre>"},{"location":"#nginx-configuration","title":"Nginx Configuration","text":"<p>Install the pre-configured nginx setup:</p> <pre><code>./scripts/install-nginx-config.sh\n</code></pre> <p>Configuration Complete</p> <p>Your nginx configuration has been automatically set up with the correct proxy settings for all bancho.py-ex endpoints.</p>"},{"location":"#deployment","title":"Deployment","text":""},{"location":"#build-and-start","title":"Build and Start","text":"<p>With everything configured, build and start the project:</p> <pre><code># Build the Docker containers\nmake build\n\n# Start all services\nmake run\n</code></pre> <p>Development vs Production</p> <ul> <li>For development: Use <code>make run</code> for easier debugging</li> <li>For production: Consider using <code>make run-detached</code> to run in background</li> </ul>"},{"location":"#autoban-configuration","title":"Autoban Configuration","text":"<p>Configure performance point limits to prevent cheating:</p> <pre><code>nano caps.json\n</code></pre> <p>PP Caps Configuration</p> <pre><code>{\n    \"enabled\": true,\n    \"caps\": {\n        \"0\": 800,    // osu! standard\n        \"1\": 1000,   // osu! taiko  \n        \"2\": 900,    // osu! catch\n        \"3\": 850     // osu! mania\n    }\n}\n</code></pre> <p>Important Notes</p> <ul> <li>Set <code>\"enabled\": true</code> to activate automatic banning</li> <li>Adjust PP values based on your server's skill level</li> <li>Monitor logs for any false positives</li> </ul>"},{"location":"plugins/","title":"Extending shiina","text":""},{"location":"plugins/#starting-plugin-development","title":"Starting plugin development","text":""}]}